---
- name: Build HA Peering Proxy
  hosts: all
  become: true
  vars:
    rsyslog_repeated_msg_reduction: "on"
  tasks:
    - name: DNF Install Dependencies
      dnf: name={{ item }}
      with_items:
        - make
        - gcc
        - python39
        - pcre-devel
        - openssl-devel
        - zip
        - unzip
      become: true
  
    - name: Get AWS-CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
      become: true
      become_user: root
      
    - name: Create python link
      file:
        src: /usr/bin/python3.9
        dest: /usr/bin/python
        state: link
        force: true
        
    - name: PIP install botocore and boto3
      pip:
        name:
            - botocore
            - boto3
        executable: pip3.9
      become: true
      become_user: root  
      
    - name: Pull variable file from S3
      shell: |
         /usr/local/bin/aws s3 cp s3://dq-config-bucket/dqusers.yml /tmp/dqusers.yml
      become: true
      become_user: root      
  
    - name: Use fetch module for this task  
      fetch:
            src: "/tmp/dqusers.yml"
            dest: ./var/dqusers.yml
            flat: yes      
  
    - name: Read dqusers yaml
      include_vars:
        file: ./var/dqusers.yml
      
    - name: Create users for dqsupport members
      user:
          name: "{{ item.name }}"
          shell: /bin/bash
          createhome: yes                    
      with_items: "{{ dqusers }}"      

    - name: setup ssh pub key for abv defined users  
      authorized_key:
        user: '{{ item.name }}'
        key: '{{ item.pubkey | join("\n")  }}'
        state: "present" 
      with_items: "{{ dqusers }}"
    
    - name: deploy sudoers file
      template:
        src: dqsupport-sudoers.j2
        dest: /etc/sudoers.d/{{ item.userno }}-{{ item.name }}-user
      with_items:
      - "{{ dqusers }}" 
      become: true
      become_user: root
      
    - name: Set timezone to Europe/London
      timezone:
        name: Europe/London

    - name: sed DNF Update
      shell: |
         sed -i 's/REGION/eu-west-2/' /etc/yum.repos.d/redhat-rhui*.repo
      become: true

    - name: Create rsyslog.conf configuration file
      copy:
        src: templates/rsyslog.conf
        dest: /etc/rsyslog.conf
        owner: root
        group: root
        mode: 0644

    - name: Create /etc/rsyslog.d/ directory
      file:
        path: /etc/rsyslog.d/
        owner: root
        group: root
        mode: 0644
        state: directory

    - name: Create 49-haproxy.conf configuration file
      copy:
        src: templates/49-haproxy.conf
        dest: /etc/rsyslog.d/49-haproxy.conf
        owner: root
        group: root
        mode: 0644

    - name: Restart rsyslog service
      service:
        name: rsyslog
        enabled: yes
        state: restarted

    - name: Get haproxy - 1.7.14 (2021-03-31) # Look out for updates - they seem to happen ~once per year
      unarchive:
        src: http://www.haproxy.org/download/1.7/src/haproxy-1.7.14.tar.gz
        dest: /usr/src/
        creates: /usr/src/haproxy-1.7.14
        remote_src: yes

    - name: Make haproxy
      make:
        chdir: /usr/src/haproxy-1.7.14
        params:
          TARGET: linux2628
          USE_PCRE: 1
          USE_OPENSSL: 1
          USE_ZLIB: 1
          USE_LIBCRYPT: 1

    - name: Install haproxy
      make:
        chdir: /usr/src/haproxy-1.7.14
        target: install

    - name: Copy haproxy.init
      copy:
        remote_src: yes
        src: /usr/src/haproxy-1.7.14/examples/haproxy.init
        dest: /etc/init.d/haproxy
        mode: 0755

    - name: Create haproxy link
      file:
        src: /usr/local/sbin/haproxy
        dest: /usr/sbin/haproxy
        state: link

    - name: Create /etc/haproxy directory
      file:
        path: /etc/haproxy
        state: directory

    - name: Copy haproxy.cfg
      copy:
        src: templates/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg

    - name: Create /var/lib/haproxy directory
      file:
        path: /var/lib/haproxy
        state: directory

    - name: Create /var/lib/haproxy/stats file
      file:
        path: /var/lib/haproxy/stats
        state: touch

    - name: systemd daemon reload
      systemd: daemon_reload=yes

    - name: Create User haproxy
      user:
        name: haproxy

    - name: Start haproxy service
      service:
        name: haproxy
        enabled: yes
        state: started

    - name: Transfer the script
      copy:
        src: templates/gets3content.py
        dest: /home/ec2-user
        mode: 0555

    - name: Test haproxy is running and listening
      shell: echo test >/dev/tcp/localhost/23

    - name: CRON to copy HAProxy config from S3
      cron:
        name: "copy HAProxy config from S3"
        minute: "*/5"
        hour: "*"
        job: source /home/ec2-user/env_vars && python3 /home/ec2-user/gets3content.py

    - name: Get AWS-CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: GET CloudWatch logs config from DQ-config-bucket - cp
      command: /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/awslogs-agent-setup.py /tmp

    - name: Set CloudWatch logs config executable
      command: chmod u+x /tmp/awslogs-agent-setup.py

    - name: Cloudwatch logs config
      copy:
        dest: /tmp/cwlogs.conf
        content: |
          [general]
          state_file = /var/awslogs/state/agent-state
          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /HAPROXY/messages
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S
          [/HAPROXY/cloud-init]
          file = /var/log/cloud-init.log
          log_group_name = /HAPROXY/cloud-init
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/cloud-init/output]
          file = /var/log/cloud-init-output.log
          log_group_name = /HAPROXY/cloud-init/output
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/cron]
          file = /var/log/cron
          log_group_name = /HAPROXY/cron
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/secure]
          file = /var/log/secure
          log_group_name = /HAPROXY/secure
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/yum]
          file = /var/log/yum.log
          log_group_name = /HAPROXY/yum
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/haproxy]
          file = /var/log/haproxy.log
          log_group_name = /HAPROXY/haproxy
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/rsyslog]
          file = /var/log/rsyslog
          log_group_name = /HAPROXY/rsyslog
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/syslog]
          file = /var/log/syslog
          log_group_name = /HAPROXY/syslog
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f

    - name: Install cloudwatch log agent
      environment:
        LC_ALL: C
      shell: /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
      args:
        creates: /var/awslogs/etc/aws.conf

    - name: Copy cloudwatch logs starter
      copy:
        src: startcloudwatchlogs.sh
        dest: /usr/bin/startcloudwatchlogs.sh
        owner: root
        group: root
        mode: 0755

    - name: Make Cron Job to start awslogs with right region
      cron:
        name: Start awslogs
        special_time: reboot
        job: /usr/bin/startcloudwatchlogs.sh

    - name: Download cloudwatch agent (for ec2 alarms)
      get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
        dest: /tmp/amazon-cloudwatch-agent.rpm
        mode: "+x"

    - name: Install cloudwatch agent (for ec2 alarms)
      dnf:
        name: /tmp/amazon-cloudwatch-agent.rpm
        state: present
        disable_gpg_check: true

    - name: Cloudwatch Agent config
      copy:
        dest: /opt/aws/amazon-cloudwatch-agent/bin/config.json
        content: |
                  {
                  "agent": {
                          "metrics_collection_interval": 60,
                          "run_as_user": "ec2-user"
                  },
                  "metrics": {
                          "namespace": "CWAgent",
                          "append_dimensions": {
                                  "InstanceId": "${aws:InstanceId}"
                          },
                          "metrics_collected": {
                                  "disk": {
                                          "measurement": [
                                                  "used_percent"
                                          ],
                                          "metrics_collection_interval": 60,
                                          "resources": [
                                                  "*"
                                          ],
                                          "ignore_file_system_types": [
                                                  "devtmpfs",
                                                  "tmpfs"
                                          ],
                                          "drop_device": true
                                  },
                                  "diskio": {
                                          "measurement": [
                                                  "io_time"
                                          ],
                                          "metrics_collection_interval": 60,
                                          "resources": [
                                                  "*"
                                          ]
                                  },
                                  "mem": {
                                          "measurement": [
                                                  "mem_used_percent",
                                                  "mem_available_percent",
                                                  "mem_used",
                                                  "mem_cached",
                                                  "mem_total"
                                          ],
                                          "metrics_collection_interval": 60
                                  },
                                  "swap": {
                                    "measurement": [
                                            "swap_used_percent"
                                    ],
                                    "metrics_collection_interval": 60
                                          }
                                  }
                          }
                  }

    - name: Set DNS Resolver Options
      blockinfile:
        path: /etc/sysconfig/network
        block: |
          RES_OPTIONS="rotate timeout:1 attempts:1"

    - name: PIP install selinux bindings and boto3
      pip:
         name:
           - selinux
           - boto3
         executable: pip3.9

    - name: Configure SSL for HAProxy
      shell: |
         mkdir -p /etc/ssl/certs/self-signed-cert
         openssl req -x509 -sha256 -days 3650 -nodes -newkey rsa:2048 -subj "/CN=*.gov.uk/C=UK/L=London" -keyout /tmp/rootCA.key -out /tmp/rootCA.crt
         cat  /tmp/rootCA.crt /tmp/rootCA.key > /etc/ssl/certs/self-signed-cert/haproxy-cert.pem
         rm -Rf /tmp/rootCA.*
      become: true

    - name: Secure sshd_config
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
    - lineinfile: dest=/etc/ssh/sshd_config
                regexp="^(.*)AllowTcpForwarding"
                line="AllowTcpForwarding no"
                state=present

    - name: sshd_config - PasswordAuthentication no
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present

    - name: sshd_config - X11Forwarding no
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^X11Forwarding"
        line: "X11Forwarding no"
        state: present
