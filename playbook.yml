---

- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - test -e /usr/bin/python || ( dnf install -y python39 && ln -s -f /usr/bin/python3.9 /usr/bin/python)

- name: Install and configure rsyslog service
  hosts: all
  become: yes
  vars:
    rsyslog_repeated_msg_reduction: "on"


  tasks:
    - name: Set timezone to Europe/London
      timezone:
        name: Europe/London

    - yum: name=rsyslog

    - name: Create rsyslog.conf configuration file
      copy:
        src: templates/rsyslog.conf
        dest: /etc/rsyslog.conf
        owner: root
        group: root
        mode: 0644
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - file:
        path: /etc/rsyslog.d/
        owner: root
        group: root
        mode: 0644
        state: directory
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Create 49-haproxy.conf configuration file
      copy:
        src: templates/49-haproxy.conf
        dest: /etc/rsyslog.d/49-haproxy.conf
        owner: root
        group: root
        mode: 0644
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - service:
        name: rsyslog
        enabled: yes
        state: restarted
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

- name: Transfer and execute HAProxy install script.
  hosts: all
  become: yes
  tasks:
    - dnf: name=gcc
    - dnf: name=pcre-devel
    - dnf: name=openssl-devel
    - dnf: name=zlib-devel
    - dnf: name=wget
    - dnf: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
    - dnf: name=python-pip

    - name: Update all libraries
      shell: dnf update -y

    - name: Get haproxy
      unarchive:
        src: http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz
        dest: /usr/src/
        creates: /usr/src/haproxy-1.7.9
        remote_src: yes
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Make haproxy
      make:
        chdir: /usr/src/haproxy-1.7.9
        params:
          TARGET: linux2628
          USE_PCRE: 1
          USE_OPENSSL: 1
          USE_ZLIB: 1
          USE_LIBCRYPT: 1
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Install haproxy
      make:
        chdir: /usr/src/haproxy-1.7.9
        target: install
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - copy:
        remote_src: yes
        src: /usr/src/haproxy-1.7.9/examples/haproxy.init
        dest: /etc/init.d/haproxy
        mode: 0755
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - file:
        src: /usr/local/sbin/haproxy
        dest: /usr/sbin/haproxy
        state: link
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - file:
        path: /etc/haproxy
        state: directory
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - copy:
        src: templates/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - file:
        path: /var/lib/haproxy
        state: directory
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - file:
        path: /var/lib/haproxy/stats
        state: touch
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - systemd: daemon_reload=yes
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - user:
        name: haproxy
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - service:
        name: haproxy
        enabled: yes
        state: started
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Transfer the script
      copy: src=templates/gets3content.py dest=/home/centos mode=0777
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Test haproxy is running and listening
      shell: echo test >/dev/tcp/localhost/23
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Copy HAProxy config from S3
      cron:
        minute: "*"
        hour: "*"
        job: source /home/centos/env_vars && python3 /home/centos/gets3content.py
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Download cloudwatch logs agent
      shell: |
         /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/awslogs-agent-setup.py /tmp
         chmod u+x /tmp/awslogs-agent-setup.py
      vars:
         ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Cloudwatch logs config
      copy:
        dest: /tmp/cwlogs.conf
        content: |
          [general]
          state_file = /var/awslogs/state/agent-state
          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /HAPROXY/messages
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S
          [/HAPROXY/cloud-init]
          file = /var/log/cloud-init.log
          log_group_name = /HAPROXY/cloud-init
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/cloud-init/output]
          file = /var/log/cloud-init-output.log
          log_group_name = /HAPROXY/cloud-init/output
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/cron]
          file = /var/log/cron
          log_group_name = /HAPROXY/cron
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/secure]
          file = /var/log/secure
          log_group_name = /HAPROXY/secure
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/yum]
          file = /var/log/yum.log
          log_group_name = /HAPROXY/yum
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/haproxy]
          file = /var/log/haproxy.log
          log_group_name = /HAPROXY/haproxy
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/rsyslog]
          file = /var/log/rsyslog
          log_group_name = /HAPROXY/rsyslog
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HAPROXY/syslog]
          file = /var/log/syslog
          log_group_name = /HAPROXY/syslog
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f

    - name: Install cloudwatch log agent
      environment:
        LC_ALL: C
      shell: ln -s -f /usr/bin/python3.9 /usr/bin/python && /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
      args:
        creates: /var/awslogs/etc/aws.conf
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python

    - name: Copy cloudwatch logs starter
      copy:
        src: startcloudwatchlogs.sh
        dest: /usr/bin/startcloudwatchlogs.sh
        owner: root
        group: root
        mode: 0755
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python

    - name: Make Cron Job to start awslogs with right region
      cron:
        name: Start awslogs
        special_time: reboot
        job: /usr/bin/startcloudwatchlogs.sh
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python

    - name: Download cloudwatch agent (for ec2 alarms)
      get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm
        dest: /tmp/amazon-cloudwatch-agent.rpm
        mode: "+x"

    - name: Install cloudwatch agent (for ec2 alarms)
      dnf:
        name: /tmp/amazon-cloudwatch-agent.rpm
        state: present
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Cloudwatch Agent config
      copy:
        dest: /opt/aws/amazon-cloudwatch-agent/bin/config.json
        content: |
                  {
                  "agent": {
                          "metrics_collection_interval": 60,
                          "run_as_user": "centos"
                  },
                  "metrics": {
                          "namespace": "CWAgent",
                          "append_dimensions": {
                                  "InstanceId": "${aws:InstanceId}"
                          },
                          "metrics_collected": {
                                  "disk": {
                                          "measurement": [
                                                  "used_percent"
                                          ],
                                          "metrics_collection_interval": 60,
                                          "resources": [
                                                  "*"
                                          ],
                                          "ignore_file_system_types": [
                                                  "devtmpfs",
                                                  "tmpfs"
                                          ],
                                          "drop_device": true
                                  },
                                  "diskio": {
                                          "measurement": [
                                                  "io_time"
                                          ],
                                          "metrics_collection_interval": 60,
                                          "resources": [
                                                  "*"
                                          ]
                                  },
                                  "mem": {
                                          "measurement": [
                                                  "mem_used_percent",
                                                  "mem_available_percent",
                                                  "mem_used",
                                                  "mem_cached",
                                                  "mem_total"
                                          ],
                                          "metrics_collection_interval": 60
                                  },
                                  "swap": {
                                    "measurement": [
                                            "swap_used_percent"
                                    ],
                                    "metrics_collection_interval": 60
                                          }
                                  }
                          }
                  }
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Set DNS Resolver Options
      blockinfile:
        path: /etc/sysconfig/network
        block: |
          RES_OPTIONS="rotate timeout:1 attempts:1"
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"

    - name: Secure sshd_config
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PermitRootLogin"
                  line="PermitRootLogin no"
                  state=present
    - lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication no"
                  state=present
    - lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^X11Forwarding"
                  line="X11Forwarding no"
                  state=present
      vars:
        ansible_python_interpreter: "/usr/libexec/platform-python"
